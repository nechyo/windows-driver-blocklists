# .github/workflows/check-updates.yml
name: Check Driver Policy Updates

on:
  schedule:
    - cron: '0 */1 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check-and-update:
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          architecture: 'x64'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 tqdm
        shell: powershell

      - name: Initialize latest.txt if not exists
        run: |
          if (-not (Test-Path latest.txt)) {
            "" | Out-File -FilePath latest.txt
          }
        shell: powershell

      - name: Check for updates and get update name
        id: check
        run: python check_update.py
        shell: powershell

      - name: Download and extract policy
        if: steps.check.outputs.update_needed == 'true'
        run: |
          # Enable advanced logging
          $env:DISM_LOG_LEVEL="4"
          
          # Ensure PowerShell runs as admin
          if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
            Write-Error "Must run as Administrator"
            exit 1
          }
          
          # Create mount directory if not exists
          New-Item -ItemType Directory -Force -Path "output\mount"
          
          # Mount with explicit architecture and logging
          $dismResult = dism.exe /Mount-Image /ImageFile:"temp\metadata.esd" /Index:3 /MountDir:"output\mount" /LogLevel:4
          if ($LASTEXITCODE -ne 0) {
            Write-Error "DISM mount failed: $dismResult"
            Get-Content C:\Windows\Logs\DISM\dism.log | Select-Object -Last 20
            exit 1
          }
          
          # Continue with extraction
          python downloader.py
          
          # Cleanup mount point
          dism.exe /Unmount-Image /MountDir:"output\mount" /Discard
        shell: powershell

      - name: Upload p7b artifact
        if: steps.check.outputs.update_needed == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.check.outputs.update_name }}
          path: output/driversipolicy.p7b
          retention-days: 90
          if-no-files-found: error

      - name: Update latest UUID
        if: steps.check.outputs.update_needed == 'true'
        run: |
          Copy-Item current_uuid.txt latest.txt
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add latest.txt
          git commit -m "Update latest UUID for ${{ steps.check.outputs.update_name }}"
          git push
        shell: powershell