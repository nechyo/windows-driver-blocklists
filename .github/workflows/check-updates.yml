# .github/workflows/check-updates.yml
name: Check Driver Policy Updates

on:
  schedule:
    - cron: '0 */1 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check-and-update:
    runs-on: windows-latest
    defaults:
      run:
        shell: powershell

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          architecture: 'x64'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 tqdm

      - name: Initialize latest.txt if not exists
        run: |
          if (-not (Test-Path latest.txt)) {
            "" | Out-File -FilePath latest.txt
          }

      - name: Check for updates and get update name
        id: check
        run: python check_update.py

      - name: Download and extract policy
        if: steps.check.outputs.update_needed == 'true'
        run: |
          # Create directories
          New-Item -ItemType Directory -Force -Path "temp"
          New-Item -ItemType Directory -Force -Path "output\mount"
          
          # Check system architecture
          $arch = (Get-WmiObject Win32_OperatingSystem).OSArchitecture
          Write-Host "System Architecture: $arch"
          
          # Enable verbose DISM logging
          $env:DISM_LOG_PATH = ".\dism.log"
          $env:DISM_LOG_LEVEL = "4"
          
          # Try to execute DISM with full path
          $dismPath = "${env:SystemRoot}\System32\Dism.exe"
          Write-Host "Using DISM from: $dismPath"
          
          # Run Python script with architecture info
          python -v downloader.py
          
          # Upload DISM log on failure
          if (-not (Test-Path "output\driversipolicy.p7b")) {
            Get-Content .\dism.log
            throw "DISM operation failed - check logs"

      - name: Upload p7b artifact
        if: steps.check.outputs.update_needed == 'true' && success()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.check.outputs.update_name }}
          path: output/driversipolicy.p7b
          if-no-files-found: error

      - name: Update latest UUID
        if: steps.check.outputs.update_needed == 'true'
        run: |
          Copy-Item current_uuid.txt latest.txt
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add latest.txt
          git commit -m "Update latest UUID for ${{ steps.check.outputs.update_name }}"
          git push